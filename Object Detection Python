import pyzed.sl as sl
import cv2
import sys
import math
import numpy as np
import socket
import time



zed = sl.Camera()
#AUT IP
mi_socket=socket.socket
mi_socket.connect(("192.168.0.20",1025))

message=mi_socket.recv(1024)
print(message.decode())


# Camera Configuration
def initial_Camera():
    # Create a ZED camera object

    # Set configuration parameters
    init_params = sl.InitParameters()
    init_params.camera_resolution = sl.RESOLUTION.HD720
    init_params.camera_fps = 60

    # Open the camera
    err = zed.open(init_params)
    if err != sl.ERROR_CODE.SUCCESS:
        print('Camera is not detected')
        exit(-1)

    print('Camera initialized')
    print('Start Capturing image...')


# Detect object and return pixel (x,y)
def grab_Image(flag):
    if flag == 0:
        img = sl.Mat()
        runtime_parameters = sl.RuntimeParameters()

        if zed.grab(runtime_parameters) == sl.ERROR_CODE.SUCCESS:
            # A new image  is available if grab() returns SUCCESS
            zed.retrieve_image(img, sl.VIEW.LEFT)  # Retrieve left image
            # Convert the Retrieve image into Numpy array
            num_img = img.get_data()
            cv2.imshow("Original image", num_img)
        else:
            print('Camera parameter is not set correctly!')

    #Save Bottle image
    if cv2.waitKey(1) & 0XFF == ord('b'):
        cv2.imwrite('/Users/iamvi/PycharmProjects/FinalYearProject/Template_img/bottles.png', num_img)
        print('Bottle Image Saved')

    if cv2.waitKey(10) & 0xFF == ord('q'):
        zed.close()
        cv2.destroyAllWindows()
        flag = 1
        return flag


def object_detection():
    print("Please select object to be detected:\n 1.Syrup Bottle\n 2.Coke Bottle")
    num = int(input())
    if num == 1:
        print('Detecting Brown Cap Bottle...')
        template = cv2.imread('/Users/iamvi/PycharmProjects/FinalYearProject/Template_img/BrownCap.png', 0)
        w, h = template.shape[::-1]
        return template, w, h, num
    elif num == 2:
        print('Detecting Coke Bottle...')
        template = cv2.imread('/Users/iamvi/PycharmProjects/FinalYearProject/Template_img/CokeCap.png', 0)
        w, h = template.shape[::-1]
        return template, w, h, num

    else:
        print('Invalid input')
        print('Exiting...')



def template_matching(temp, w, h, previous_x, previous_y, coordlist, number):
    if number == 1 or number == 2:
        print('Detecting bottles....')
        bottleimg = cv2.imread('/Users/iamvi/PycharmProjects/FinalYearProject/Template_img/bottles.png')

        # Template Matching
        tempBlur = cv2.medianBlur(temp, 5)
        gray_img = cv2.cvtColor(bottleimg, cv2.COLOR_BGR2GRAY)
        res = cv2.matchTemplate(gray_img, tempBlur, cv2.TM_CCOEFF_NORMED)
        threshold = 0.8
        loc = np.where(res >= threshold)
        for pt in zip(*loc[::-1]):
            cv2.rectangle(bottleimg, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 2)
            center_x = pt[0] + round(w / 2)
            center_y = pt[1] + round(h / 2)
            cv2.circle(bottleimg, (center_x, center_y), 3, (0, 255, 0), -1)

            # Collect coordinate x,y
            if center_x != previous_x or center_y != previous_y:

                error_x = abs(previous_x - center_x)
                error_y = abs(previous_y - center_y)
                if error_x > 10 and error_y > 10:
                    previous_x = center_x
                    previous_y = center_y
                    print('x coordinate:' + str(center_x), '   y coordinate:' + str(center_y))

                    cv2.putText(bottleimg, '{},{}'.format(center_x, center_y), (pt[0], pt[1] - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 1, cv2.LINE_AA)

                    # Calculate the Coordinate for syrup in real live
                    if number == 1:
                        real_x=0.0394*center_x-28.825
                        real_y=-0.04*center_y+14.236

                        #Convert the camera coordinate system to robot system
                        X= real_y*10
                        Y= -real_x*10
                        coordlist.append([X,Y])

                    # Calculate the Coordinate for coke in global frame
                    if number == 2:
                        real_x=0.0491*center_x-34.598
                        real_y=-0.0496*center_y+17.501

                        #Convert the camera coordinate system to robot system
                        X= real_y*10
                        Y= -real_x*10
                        coordlist.append([X,Y])

        if len(coordlist) > 0:
            cv2.imwrite('/Users/iamvi/PycharmProjects/FinalYearProject/Template_img/bottles_detected.png', bottleimg)
            print('Bottles Detected image saved')

        return coordlist




def main(args):
    looping = True
    bottle_coordinate_list = []
    boxcoordinate_list=[]
    x_origin, y_origin = 0, 0
    initial_Camera()
    #Caputre Bottles image
    while looping:
        # Grab an image when robot is in position
        flag=0
        flag = grab_Image(flag,bottle_coordinate_list)
        if flag == 1:
            looping = False

    temp, w, h, number = object_detection()
    bottle_coordinate_list = template_matching(temp, w, h, x_origin, y_origin, bottle_coordinate_list,number,boxcoordinate_list)
    print(bottle_coordinate_list)

    #==============================================================#
    # Transferring Data

    num_objects=str(len(bottle_coordinate_list))
    mi_socket.send(num_objects.encode())

    #Ask the robot to send the feedback from Robotsudio when one bottle is placed in the box
    for i in range(len(bottle_coordinate_list)):

        print(str(bottle_coordinate_list[i][0]),bottle_coordinate_list[i][1])
        string_x=str(bottle_coordinate_list[i][0])
        string_y=str(bottle_coordinate_list[i][1])
        mi_socket.send(string_x.encode())
        time.sleep(0.5)
        mi_socket.send(string_y.encode())
        time.sleep(0.5)
        print('Ready to grab next object? (Y/N)')

        message=mi_socket.recv(1024)
        if message.decode()=='Y':
            continue

    mi_socket.close()
    print('Program ended')


if __name__ == '__main__':
    main(sys.argv)
   
